/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.baeldung.openapi.api;

import com.baeldung.openapi.model.Error;
import com.baeldung.openapi.model.PricesListRequest;
import com.baeldung.openapi.model.PricesListResource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-18T20:37:11.047804100+02:00[Europe/Paris]")
@Validated
@Api(value = "prices", description = "the prices API")
public interface PricesApi {

    default PricesApiDelegate getDelegate() {
        return new PricesApiDelegate() {};
    }

    /**
     * POST /prices : List all prices by filter
     *
     * @param pricesListRequest  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "List all prices by filter", nickname = "getPricesByFilter", notes = "", response = PricesListResource.class, responseContainer = "List", tags={ "prices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PricesListResource.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/prices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<PricesListResource>> getPricesByFilter(@ApiParam(value = "") @Valid @RequestBody(required = false) PricesListRequest pricesListRequest) {
        return getDelegate().getPricesByFilter(pricesListRequest);
    }

}
